using System.Collections.Generic;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace StronglyTypedId.Generator
{
    public class SafeIdSyntaxTreeGenerator : StringSyntaxTreeGenerator
    {
        private readonly string _type;
        private readonly string _version;
        private readonly string _separator;
        private readonly string _generatorFunction;

        public SafeIdSyntaxTreeGenerator(string type, string version, string separator, string generatorFunction)
        {
            _type = type;
            _version = version;
            _separator = separator;
            _generatorFunction = generatorFunction;

        }
        protected override IEnumerable<MemberDeclarationSyntax> GetMembers(string idName)
        {
            yield return SyntaxFactory.FieldDeclaration(
                    SyntaxFactory.VariableDeclaration(
                            SyntaxFactory.PredefinedType(
                                SyntaxFactory.Token(SyntaxKind.StringKeyword)))
                        .WithVariables(
                            SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                                SyntaxFactory.VariableDeclarator(
                                        SyntaxFactory.Identifier("Type"))
                                    .WithInitializer(
                                        SyntaxFactory.EqualsValueClause(
                                            SyntaxFactory.LiteralExpression(
                                                SyntaxKind.StringLiteralExpression,
                                                SyntaxFactory.Literal(_type)))))))
                .WithModifiers(
                    SyntaxFactory.TokenList(
                        new[]
                        {
                            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                            SyntaxFactory.Token(SyntaxKind.ConstKeyword)
                        }));
            yield return SyntaxFactory.FieldDeclaration(
                    SyntaxFactory.VariableDeclaration(
                            SyntaxFactory.PredefinedType(
                                SyntaxFactory.Token(SyntaxKind.StringKeyword)))
                        .WithVariables(
                            SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                                SyntaxFactory.VariableDeclarator(
                                        SyntaxFactory.Identifier("Version"))
                                    .WithInitializer(
                                        SyntaxFactory.EqualsValueClause(
                                            SyntaxFactory.LiteralExpression(
                                                SyntaxKind.StringLiteralExpression,
                                                SyntaxFactory.Literal(_version ?? "")))))))
                .WithModifiers(
                    SyntaxFactory.TokenList(
                        new[]
                        {
                            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                            SyntaxFactory.Token(SyntaxKind.ConstKeyword)
                        }));
            yield return SyntaxFactory.FieldDeclaration(
                    SyntaxFactory.VariableDeclaration(
                            SyntaxFactory.PredefinedType(
                                SyntaxFactory.Token(SyntaxKind.StringKeyword)))
                        .WithVariables(
                            SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                                SyntaxFactory.VariableDeclarator(
                                        SyntaxFactory.Identifier("Separator"))
                                    .WithInitializer(
                                        SyntaxFactory.EqualsValueClause(
                                            SyntaxFactory.LiteralExpression(
                                                SyntaxKind.StringLiteralExpression,
                                                SyntaxFactory.Literal(_separator)))))))
                .WithModifiers(
                    SyntaxFactory.TokenList(
                        new[]
                        {
                            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                            SyntaxFactory.Token(SyntaxKind.ConstKeyword)
                        }));
            yield return SyntaxFactory.FieldDeclaration(
                    SyntaxFactory.VariableDeclaration(
                            SyntaxFactory.PredefinedType(
                                SyntaxFactory.Token(SyntaxKind.StringKeyword)))
                        .WithVariables(
                            SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                                SyntaxFactory.VariableDeclarator(
                                        SyntaxFactory.Identifier("GeneratorFunction"))
                                    .WithInitializer(
                                        SyntaxFactory.EqualsValueClause(
                                            SyntaxFactory.LiteralExpression(
                                                SyntaxKind.StringLiteralExpression,
                                                SyntaxFactory.Literal(_generatorFunction)))))))
                .WithModifiers(
                    SyntaxFactory.TokenList(
                        new[]
                        {
                            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                            SyntaxFactory.Token(SyntaxKind.ConstKeyword)
                        }));

            yield return SyntaxFactory.PropertyDeclaration(
                    SyntaxFactory.PredefinedType
                    (
                        SyntaxFactory.Token(SyntaxKind.StringKeyword)),
                    SyntaxFactory.Identifier("Value"))
                .WithModifiers
                (
                    SyntaxFactory.TokenList
                    (
                        SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
                .WithAccessorList
                (
                    SyntaxFactory.AccessorList
                    (
                        SyntaxFactory.SingletonList<AccessorDeclarationSyntax>
                        (
                            SyntaxFactory.AccessorDeclaration
                                (
                                    SyntaxKind.GetAccessorDeclaration)
                                .WithSemicolonToken
                                (
                                    SyntaxFactory.Token(SyntaxKind.SemicolonToken)))));
            var idValidationIfStatement = SyntaxFactory.IfStatement(
                SyntaxFactory.PrefixUnaryExpression(
                    SyntaxKind.LogicalNotExpression,
                    SyntaxFactory.InvocationExpression(
                            SyntaxFactory.MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                SyntaxFactory.IdentifierName("value"),
                                SyntaxFactory.IdentifierName("StartsWith")))
                        .WithArgumentList(
                            SyntaxFactory.ArgumentList(
                                SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                    SyntaxFactory.Argument(
                                        SyntaxFactory.BinaryExpression(
                                            SyntaxKind.AddExpression,
                                            SyntaxFactory.IdentifierName("Type"),
                                            SyntaxFactory.IdentifierName("Separator"))))))),
                SyntaxFactory.Block(
                    SyntaxFactory.SingletonList<StatementSyntax>(
                        SyntaxFactory.ThrowStatement(
                            SyntaxFactory.ObjectCreationExpression(
                                    SyntaxFactory.QualifiedName(
                                        SyntaxFactory.IdentifierName("System"),
                                        SyntaxFactory.IdentifierName("InvalidOperationException")))
                                .WithArgumentList(
                                    SyntaxFactory.ArgumentList(
                                        SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                            SyntaxFactory.Argument(
                                                SyntaxFactory.LiteralExpression(
                                                    SyntaxKind.StringLiteralExpression,
                                                    SyntaxFactory.Literal("Invalid Type prefix"))))))))));
            yield return SyntaxFactory.ConstructorDeclaration(
                    SyntaxFactory.Identifier(idName))
                .WithModifiers(
                    SyntaxFactory.TokenList(
                        SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
                .WithParameterList(
                    SyntaxFactory.ParameterList(
                        SyntaxFactory.SingletonSeparatedList<ParameterSyntax>(
                            SyntaxFactory.Parameter(
                                    SyntaxFactory.Identifier("value"))
                                .WithType(
                                    SyntaxFactory.PredefinedType(
                                        SyntaxFactory.Token(SyntaxKind.StringKeyword))))))
                .WithBody(
                    SyntaxFactory.Block(
                        string.IsNullOrEmpty(_type) ? (StatementSyntax) SyntaxFactory.EmptyStatement() : idValidationIfStatement,
                        SyntaxFactory.ExpressionStatement(
                            SyntaxFactory.AssignmentExpression(
                                SyntaxKind.SimpleAssignmentExpression,
                                SyntaxFactory.IdentifierName("Value"),
                                SyntaxFactory.IdentifierName("value")))));
            var idGenerationElements = new List<SyntaxNodeOrToken>
            {
                SyntaxFactory.Argument(
                    SyntaxFactory.IdentifierName("Separator")),
            };
            if (!string.IsNullOrWhiteSpace(_type))
            {
                idGenerationElements.Add(SyntaxFactory.Token(SyntaxKind.CommaToken));
                idGenerationElements.Add(SyntaxFactory.Argument(
                    SyntaxFactory.IdentifierName("Type")));
            }

            if (!string.IsNullOrWhiteSpace(_version))
            {
                idGenerationElements.Add(SyntaxFactory.Token(SyntaxKind.CommaToken));
                idGenerationElements.Add(SyntaxFactory.Argument(
                    SyntaxFactory.IdentifierName("Version")));
            }

            idGenerationElements.Add(SyntaxFactory.Token(SyntaxKind.CommaToken));
            idGenerationElements.Add(SyntaxFactory.Argument(
                    SyntaxFactory.IdentifierName("newId")));


            yield return SyntaxFactory.MethodDeclaration(
                    SyntaxFactory.IdentifierName(idName),
                    SyntaxFactory.Identifier("Create"))
                .WithModifiers(
                    SyntaxFactory.TokenList(
                        new[]
                        {
                            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                            SyntaxFactory.Token(SyntaxKind.StaticKeyword)
                        }))
                .WithParameterList(
                    SyntaxFactory.ParameterList(
                        SyntaxFactory.SingletonSeparatedList<ParameterSyntax>(
                            SyntaxFactory.Parameter(
                                    SyntaxFactory.Identifier("newId"))
                                .WithType(
                                    SyntaxFactory.PredefinedType(
                                        SyntaxFactory.Token(SyntaxKind.StringKeyword))))))
                .WithExpressionBody(
                    SyntaxFactory.ArrowExpressionClause(
                        SyntaxFactory.ObjectCreationExpression(
                                SyntaxFactory.IdentifierName(idName))
                            .WithArgumentList(
                                SyntaxFactory.ArgumentList(
                                    SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                        SyntaxFactory.Argument(
                                            SyntaxFactory.InvocationExpression(
                                                    SyntaxFactory.MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        SyntaxFactory.PredefinedType(
                                                            SyntaxFactory.Token(SyntaxKind.StringKeyword)),
                                                        SyntaxFactory.IdentifierName("Join")))
                                                .WithArgumentList(
                                                    SyntaxFactory.ArgumentList(
                                                        SyntaxFactory.SeparatedList<ArgumentSyntax>(
                                                            idGenerationElements)))))))))
                .WithSemicolonToken(
                    SyntaxFactory.Token(SyntaxKind.SemicolonToken));
            yield return SyntaxFactory.MethodDeclaration(
                    SyntaxFactory.IdentifierName(idName),
                    SyntaxFactory.Identifier("New"))
                .WithModifiers(
                    SyntaxFactory.TokenList(
                        new[]{
                            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                            SyntaxFactory.Token(SyntaxKind.StaticKeyword)}))
                .WithExpressionBody(
                    SyntaxFactory.ArrowExpressionClause(
                        SyntaxFactory.InvocationExpression(
                                SyntaxFactory.IdentifierName("Create"))
                            .WithArgumentList(
                                SyntaxFactory.ArgumentList(
                                    SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                        SyntaxFactory.Argument(
                                            SyntaxFactory.InvocationExpression(
                                                SyntaxFactory.IdentifierName(_generatorFunction))))))))
                .WithSemicolonToken(
                    SyntaxFactory.Token(SyntaxKind.SemicolonToken))
                .NormalizeWhitespace();

            yield return SyntaxFactory.FieldDeclaration(
                    SyntaxFactory.VariableDeclaration(
                            SyntaxFactory.IdentifierName(idName))
                        .WithVariables(
                            SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                                SyntaxFactory.VariableDeclarator(
                                        SyntaxFactory.Identifier("Empty"))
                                    .WithInitializer(
                                        SyntaxFactory.EqualsValueClause(
                                            SyntaxFactory.InvocationExpression(
                                                    SyntaxFactory.IdentifierName("Create"))
                                                .WithArgumentList(
                                                    SyntaxFactory.ArgumentList(
                                                        SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                                            SyntaxFactory.Argument(
                                                                SyntaxFactory.MemberAccessExpression(
                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                    SyntaxFactory.PredefinedType(
                                                                        SyntaxFactory.Token(SyntaxKind.StringKeyword)),
                                                                    SyntaxFactory.IdentifierName("Empty")))))))))))
                .WithModifiers(
                    SyntaxFactory.TokenList(
                        new[]{
                            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                            SyntaxFactory.Token(SyntaxKind.StaticKeyword),
                            SyntaxFactory.Token(SyntaxKind.ReadOnlyKeyword)}));
            yield return SyntaxFactory.MethodDeclaration
                (
                    SyntaxFactory.PredefinedType
                    (
                        SyntaxFactory.Token(SyntaxKind.BoolKeyword)),
                    SyntaxFactory.Identifier("Equals"))
                .WithModifiers
                (
                    SyntaxFactory.TokenList
                    (
                        SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
                .WithParameterList
                (
                    SyntaxFactory.ParameterList
                    (
                        SyntaxFactory.SingletonSeparatedList<ParameterSyntax>
                        (
                            SyntaxFactory.Parameter
                                (
                                    SyntaxFactory.Identifier("other"))
                                .WithType
                                (
                                    SyntaxFactory.IdentifierName(idName)))))
                .WithExpressionBody
                (
                    SyntaxFactory.ArrowExpressionClause
                    (
                        SyntaxFactory.InvocationExpression
                            (
                                SyntaxFactory.MemberAccessExpression
                                (
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    SyntaxFactory.MemberAccessExpression
                                    (
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        SyntaxFactory.ThisExpression(),
                                        SyntaxFactory.IdentifierName("Value")),
                                    SyntaxFactory.IdentifierName("Equals")))
                            .WithArgumentList
                            (
                                SyntaxFactory.ArgumentList
                                (
                                    SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>
                                    (
                                        SyntaxFactory.Argument
                                        (
                                            SyntaxFactory.MemberAccessExpression
                                            (
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                SyntaxFactory.IdentifierName("other"),
                                                SyntaxFactory.IdentifierName("Value"))))))))
                .WithSemicolonToken
                (
                    SyntaxFactory.Token(SyntaxKind.SemicolonToken));
            yield return SyntaxFactory.MethodDeclaration
                (
                    SyntaxFactory.PredefinedType
                    (
                        SyntaxFactory.Token(SyntaxKind.IntKeyword)),
                    SyntaxFactory.Identifier("CompareTo"))
                .WithModifiers
                (
                    SyntaxFactory.TokenList
                    (
                        SyntaxFactory.Token(SyntaxKind.PublicKeyword)))
                .WithParameterList
                (
                    SyntaxFactory.ParameterList
                    (
                        SyntaxFactory.SingletonSeparatedList<ParameterSyntax>
                        (
                            SyntaxFactory.Parameter
                                (
                                    SyntaxFactory.Identifier("other"))
                                .WithType
                                (
                                    SyntaxFactory.IdentifierName(idName)))))
                .WithExpressionBody
                (
                    SyntaxFactory.ArrowExpressionClause
                    (
                        SyntaxFactory.InvocationExpression
                            (
                                SyntaxFactory.MemberAccessExpression
                                (
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    SyntaxFactory.IdentifierName("Value"),
                                    SyntaxFactory.IdentifierName("CompareTo")))
                            .WithArgumentList
                            (
                                SyntaxFactory.ArgumentList
                                (
                                    SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>
                                    (
                                        SyntaxFactory.Argument
                                        (
                                            SyntaxFactory.MemberAccessExpression
                                            (
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                SyntaxFactory.IdentifierName("other"),
                                                SyntaxFactory.IdentifierName("Value"))))))))
                .WithSemicolonToken
                (
                    SyntaxFactory.Token(SyntaxKind.SemicolonToken));
            yield return SyntaxFactory.MethodDeclaration
                (
                    SyntaxFactory.PredefinedType
                    (
                        SyntaxFactory.Token(SyntaxKind.BoolKeyword)),
                    SyntaxFactory.Identifier("Equals"))
                .WithModifiers
                (
                    SyntaxFactory.TokenList
                    (
                        new[]
                        {
                            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                            SyntaxFactory.Token(SyntaxKind.OverrideKeyword)}))
                .WithParameterList
                (
                    SyntaxFactory.ParameterList
                    (
                        SyntaxFactory.SingletonSeparatedList<ParameterSyntax>
                        (
                            SyntaxFactory.Parameter
                                (
                                    SyntaxFactory.Identifier("obj"))
                                .WithType
                                (
                                    SyntaxFactory.PredefinedType
                                    (
                                        SyntaxFactory.Token(SyntaxKind.ObjectKeyword))))))
                .WithBody
                (
                    SyntaxFactory.Block
                    (
                        SyntaxFactory.IfStatement
                        (
                            SyntaxFactory.InvocationExpression
                                (
                                    SyntaxFactory.IdentifierName("ReferenceEquals"))
                                .WithArgumentList
                                (
                                    SyntaxFactory.ArgumentList
                                    (
                                        SyntaxFactory.SeparatedList<ArgumentSyntax>
                                        (
                                            new SyntaxNodeOrToken[]
                                            {
                                                SyntaxFactory.Argument
                                                (
                                                    SyntaxFactory.LiteralExpression
                                                    (
                                                        SyntaxKind.NullLiteralExpression)),
                                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                SyntaxFactory.Argument
                                                (
                                                    SyntaxFactory.IdentifierName("obj"))}))),
                            SyntaxFactory.ReturnStatement
                            (
                                SyntaxFactory.LiteralExpression
                                (
                                    SyntaxKind.FalseLiteralExpression))),
                        SyntaxFactory.ReturnStatement
                        (
                            SyntaxFactory.BinaryExpression
                            (
                                SyntaxKind.LogicalAndExpression,
                                SyntaxFactory.IsPatternExpression
                                (
                                    SyntaxFactory.IdentifierName("obj"),
                                    SyntaxFactory.DeclarationPattern
                                    (
                                        SyntaxFactory.IdentifierName(idName),
                                        SyntaxFactory.SingleVariableDesignation
                                        (
                                            SyntaxFactory.Identifier("other")))),
                                SyntaxFactory.InvocationExpression
                                    (
                                        SyntaxFactory.IdentifierName("Equals"))
                                    .WithArgumentList
                                    (
                                        SyntaxFactory.ArgumentList
                                        (
                                            SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>
                                            (
                                                SyntaxFactory.Argument
                                                (
                                                    SyntaxFactory.IdentifierName("other")))))))));
            yield return SyntaxFactory.MethodDeclaration
                (
                    SyntaxFactory.PredefinedType
                    (
                        SyntaxFactory.Token(SyntaxKind.IntKeyword)),
                    SyntaxFactory.Identifier("GetHashCode"))
                .WithModifiers
                (
                    SyntaxFactory.TokenList
                    (
                        new[]
                        {
                            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                            SyntaxFactory.Token(SyntaxKind.OverrideKeyword)}))
                .WithExpressionBody
                (
                    SyntaxFactory.ArrowExpressionClause
                    (
                        SyntaxFactory.InvocationExpression
                        (
                            SyntaxFactory.MemberAccessExpression
                            (
                                SyntaxKind.SimpleMemberAccessExpression,
                                SyntaxFactory.IdentifierName("Value"),
                                SyntaxFactory.IdentifierName("GetHashCode")))))
                .WithSemicolonToken
                (
                    SyntaxFactory.Token(SyntaxKind.SemicolonToken));
            yield return SyntaxFactory.MethodDeclaration
                (
                    SyntaxFactory.PredefinedType
                    (
                        SyntaxFactory.Token(SyntaxKind.StringKeyword)),
                    SyntaxFactory.Identifier("ToString"))
                .WithModifiers
                (
                    SyntaxFactory.TokenList
                    (
                        new[]
                        {
                            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                            SyntaxFactory.Token(SyntaxKind.OverrideKeyword)}))
                .WithExpressionBody
                (
                    SyntaxFactory.ArrowExpressionClause
                    (
                        SyntaxFactory.InvocationExpression
                        (
                            SyntaxFactory.MemberAccessExpression
                            (
                                SyntaxKind.SimpleMemberAccessExpression,
                                SyntaxFactory.IdentifierName("Value"),
                                SyntaxFactory.IdentifierName("ToString")))))
                .WithSemicolonToken
                (
                    SyntaxFactory.Token(SyntaxKind.SemicolonToken));
            yield return SyntaxFactory.OperatorDeclaration
                (
                    SyntaxFactory.PredefinedType
                    (
                        SyntaxFactory.Token(SyntaxKind.BoolKeyword)),
                    SyntaxFactory.Token(SyntaxKind.EqualsEqualsToken))
                .WithModifiers
                (
                    SyntaxFactory.TokenList
                    (
                        new[]
                        {
                            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                            SyntaxFactory.Token(SyntaxKind.StaticKeyword)}))
                .WithParameterList
                (
                    SyntaxFactory.ParameterList
                    (
                        SyntaxFactory.SeparatedList<ParameterSyntax>
                        (
                            new SyntaxNodeOrToken[]
                            {
                                SyntaxFactory.Parameter
                                    (
                                        SyntaxFactory.Identifier("a"))
                                    .WithType
                                    (
                                        SyntaxFactory.IdentifierName(idName)),
                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                SyntaxFactory.Parameter
                                    (
                                        SyntaxFactory.Identifier("b"))
                                    .WithType
                                    (
                                        SyntaxFactory.IdentifierName(idName))})))
                .WithExpressionBody
                (
                    SyntaxFactory.ArrowExpressionClause
                    (
                        SyntaxFactory.BinaryExpression
                        (
                            SyntaxKind.EqualsExpression,
                            SyntaxFactory.InvocationExpression
                                (
                                    SyntaxFactory.MemberAccessExpression
                                    (
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        SyntaxFactory.IdentifierName("a"),
                                        SyntaxFactory.IdentifierName("CompareTo")))
                                .WithArgumentList
                                (
                                    SyntaxFactory.ArgumentList
                                    (
                                        SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>
                                        (
                                            SyntaxFactory.Argument
                                            (
                                                SyntaxFactory.IdentifierName("b"))))),
                            SyntaxFactory.LiteralExpression
                            (
                                SyntaxKind.NumericLiteralExpression,
                                SyntaxFactory.Literal(0)))))
                .WithSemicolonToken
                (
                    SyntaxFactory.Token(SyntaxKind.SemicolonToken));
            yield return SyntaxFactory.OperatorDeclaration
                (
                    SyntaxFactory.PredefinedType
                    (
                        SyntaxFactory.Token(SyntaxKind.BoolKeyword)),
                    SyntaxFactory.Token(SyntaxKind.ExclamationEqualsToken))
                .WithModifiers
                (
                    SyntaxFactory.TokenList
                    (
                        new[]
                        {
                            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                            SyntaxFactory.Token(SyntaxKind.StaticKeyword)}))
                .WithParameterList
                (
                    SyntaxFactory.ParameterList
                    (
                        SyntaxFactory.SeparatedList<ParameterSyntax>
                        (
                            new SyntaxNodeOrToken[]
                            {
                                SyntaxFactory.Parameter
                                    (
                                        SyntaxFactory.Identifier("a"))
                                    .WithType
                                    (
                                        SyntaxFactory.IdentifierName(idName)),
                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                SyntaxFactory.Parameter
                                    (
                                        SyntaxFactory.Identifier("b"))
                                    .WithType
                                    (
                                        SyntaxFactory.IdentifierName(idName))})))
                .WithExpressionBody
                (
                    SyntaxFactory.ArrowExpressionClause
                    (
                        SyntaxFactory.PrefixUnaryExpression
                        (
                            SyntaxKind.LogicalNotExpression,
                            SyntaxFactory.ParenthesizedExpression
                            (
                                SyntaxFactory.BinaryExpression
                                (
                                    SyntaxKind.EqualsExpression,
                                    SyntaxFactory.IdentifierName("a"),
                                    SyntaxFactory.IdentifierName("b"))))))
                .WithSemicolonToken
                (
                    SyntaxFactory.Token(SyntaxKind.SemicolonToken));
        }
    }
}